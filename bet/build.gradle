apply plugin: 'java-library'
apply plugin: 'com.google.protobuf'


dependencies {
    implementation "javax.annotation:javax.annotation-api:${javax_version}"
    api 'io.grpc:grpc-netty'
    api "io.grpc:grpc-stub"
    api "io.grpc:grpc-protobuf"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.testcontainers:mysql'

    implementation(project(":wallet-grpc-api"))
    implementation("net.devh:grpc-server-spring-boot-starter:${devh_version}")
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    runtimeOnly 'mysql:mysql-connector-java'

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    implementation 'net.devh:grpc-spring-boot-starter:2.13.1.RELEASE'


    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'


}



protobuf {
    protoc {
        if (osdetector.os == "osx") {
            artifact = "com.google.protobuf:protoc:${protobufVersion}:osx-x86_64"
        } else {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
    }
    plugins {
        grpc {
            if (osdetector.os == "osx") {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcBomVersion}:osx-x86_64"
            } else {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcBomVersion}"
            }
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main').each { task ->
            task.plugins {
                grpc {
                    outputSubDir = 'java'
                }
            }
        }
    }

    generatedFilesBaseDir = "$projectDir/src/generated"
}

sourceSets {
    src {
        main {
            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}